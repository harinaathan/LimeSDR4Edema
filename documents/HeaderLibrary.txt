"File_name","Method/API","Enums/Constants/Arrays","Description/Usage","Invoking_Syntax","Parameters","Parameter_Dtypes","Parameter_Description","Return_Dtype","Return_Description"
"ADCUnits.h","adcUnits2string",,"Converts ADC sensor unit codes to human-readable strings.","adcUnits2string(units)","units","unsigned","The unit code, should be less than ADC_UNITS_COUNT.","const char*","Human-readable string of the unit."
"ADCUnits.h",,"eADC_UNITS","Enumeration of ADC sensor units.","Not applicable","Not applicable","Not applicable","RAW, VOLTAGE, CURRENT, RESISTANCE, POWER, TEMPERATURE, ADC_UNITS_COUNT.","enum","Represents ADC sensor units."
"ADCUnits.h",,"adc_units_text","Array holding unit suffixes for ADC sensor units.","Not applicable","Not applicable","Not applicable","Empty string for RAW; ""V"" for VOLTAGE; ""A"" for CURRENT; ""Ohm"" for RESISTANCE; ""W"" for POWER; ""C"" for TEMPERATURE.","const char[][]","Human-readable suffixes for units."
"ADF4002.h","SetFrefFvco",,"Sets the reference frequency and VCO frequency parameters.","SetFrefFvco(Fref, Fvco, rcount, ncount)","Fref, Fvco, rcount, ncount","double, double, int &, int &","Frequency values and counts for reference and VCO.","void","Modifies internal configuration settings."
"ADF4002.h","SetReferenceCounterLatch",,"Configures reference counter latch settings.","SetReferenceCounterLatch(Ldp, Abw, refCounter)","Ldp, Abw, refCounter","int, int, int","Settings for loop filter, band selection, and counter configuration.","void","Alters latch settings for reference counting."
"ADF4002.h","SetNCounterLatch",,"Sets the N counter latch parameters.","SetNCounterLatch(CPgain, NCounter)","CPgain, NCounter","int, int","Charge pump gain and counter configuration.","void","Modifies counter latch settings."
"ADF4002.h","SetFunctionLatch",,"Configures function latch settings.","SetFunctionLatch(currentSetting1, currentSetting2, ...)","Various settings","int, etc.","Adjusts current settings, timer counter, fast lock, and muxout control.","void","Modifies function latch parameters."
"ADF4002.h","SetInitializationLatch",,"Sets initialization latch settings.","SetInitializationLatch(currentSetting1, currentSetting2, ...)","Various settings","int, etc.","Configures initialization settings similar to function latch.","void","Sets initial configurations for operation."
"ADF4002.h","GetConfig",,"Retrieves configuration settings into an array.","GetConfig(data)","data","unsigned char[12]","Array to store configuration settings.","void","Outputs configuration data to the provided array."
"ADF4002.h","SetDefaults",,"Restores default settings.","SetDefaults()","None","None","No parameters required.","void","Resets to factory defaults."
"ADF4002.h","MakeData",,"Prepares internal data structures.","MakeData()","None","None","No parameters required.","void","Generates data for configuration purposes."
"ADF4002.h","CalculateRN",,"Performs calculation for reference and N counters.","CalculateRN()","None","None","No parameters required.","void","Computes RN-related values."
"ConnectionHandle.h","ConnectionHandle()",,"Default constructor. Initializes a ConnectionHandle object with default values.","ConnectionHandle()","None","None","No parameters required.","None","Constructs a ConnectionHandle object."
"ConnectionHandle.h","ConnectionHandle(args)",,"Constructor to initialize using a serialized string of key-value pairs.","ConnectionHandle(const std::string &args)","args","std::string","Serialized key-value pairs for initialization.","None","Constructs a ConnectionHandle object from input string."
"ConnectionHandle.h","serialize()",,"Serializes the ConnectionHandle object into a string representation.","serialize()","None","None","No parameters required.","std::string","Returns a string representation of the connection handle."
"ConnectionHandle.h","ToString()",,"Converts the ConnectionHandle object into a displayable string format.","ToString()","None","None","No parameters required.","std::string","Provides a human-readable string format of the connection handle."
"ConnectionHandle.h","operator==(lhs, rhs)",,"Compares two ConnectionHandle objects for equality.","operator==(lhs, rhs)","lhs, rhs","ConnectionHandle &, ConnectionHandle &","References to ConnectionHandle objects being compared.","bool","Returns true if objects are equal; false otherwise."
"ConnectionHandle.h",,"std::string module","Represents the name of the support module (e.g., EVB7COM, EVB7STREAM).","Not applicable","Not applicable","Not applicable","Member variable, not a function.","Not applicable","Member variable, holds module name."
"ConnectionHandle.h",,"std::string media","Represents the connection media type (e.g., SPI, COM, USB).","Not applicable","Not applicable","Not applicable","Member variable, not a function.","Not applicable","Member variable, holds media type."
"ConnectionHandle.h",,"std::string name","Represents the device name (e.g., STREAM, NOVENA).","Not applicable","Not applicable","Not applicable","Member variable, not a function.","Not applicable","Member variable, holds device name."
"ConnectionHandle.h",,"std::string addr","Represents an address such as a URL, IP address, or similar.","Not applicable","Not applicable","Not applicable","Member variable, not a function.","Not applicable","Member variable, holds address string."
"ConnectionHandle.h",,"std::string serial","Represents a serial number unique to a particular device.","Not applicable","Not applicable","Not applicable","Member variable, not a function.","Not applicable","Member variable, holds serial number."
"ConnectionHandle.h",,"long long index","Represents an internal index that may enumerate device handles.","Not applicable","Not applicable","Not applicable","Member variable, not a function.","Not applicable","Member variable, holds internal index."
"ConnectionRegistry.h","findConnections",,"Discovers available connection handles based on optional hints.","findConnections(hint)","hint","ConnectionHandle","An optional handle with some fields pre-filled.","std::vector<ConnectionHandle>","List of connection handles that can be used to establish connections."
"ConnectionRegistry.h","makeConnection",,"Creates a connection instance from a specified handle.","makeConnection(handle)","handle","ConnectionHandle","Handle with necessary details filled-in to create a connection.","IConnection*","Pointer to the created connection instance or null."
"ConnectionRegistry.h","freeConnection",,"Frees the memory for a previously created connection instance.","freeConnection(conn)","conn","IConnection*","Pointer to the connection instance to be freed.","void","Releases the connection resource."
"ConnectionRegistry.h","moduleNames",,"Returns a list of names of available registry entry modules.","moduleNames()","None","None","No parameters required.","std::vector<std::string>","List of module names available in the registry."
"ConnectionRegistry.h","ConnectionRegistryEntry",,"Constructor that registers a new connection type in the registry.","ConnectionRegistryEntry(name)","name","std::string","Unique name describing the connection type.","None","Registers the connection type in the registry."
"ConnectionRegistry.h","~ConnectionRegistryEntry",,"Destructor that unregisters the connection type.","~ConnectionRegistryEntry()","None","None","No parameters required.","None","Unregisters the connection type from the registry."
"ConnectionRegistry.h","enumerate",,"Discovers connection handles that match a given hint.","enumerate(hint)","hint","ConnectionHandle","Handle with hints for discovery.","std::vector<ConnectionHandle>","List of discovered handles based on the provided hint."
"ConnectionRegistry.h","make",,"Creates a connection instance for the specified handle.","make(handle)","handle","ConnectionHandle","Handle with necessary details for creating the connection.","IConnection*","Pointer to the created connection instance."
"ConnectionRegistry.h","_name","std::string","Represents the name of the connection type in the registry.","Not applicable","Not applicable","Not applicable","A private member variable, not an API.","Not applicable","Holds the name of the registered connection type."
"dataTypes.h","SamplesPacket()",,"Constructor to initialize the SamplesPacket object with an optional size.","SamplesPacket(int size = 0)","size","int","Size of the allocated samples array.","None","Creates a SamplesPacket object."
"dataTypes.h","SamplesPacket(pkt&&)",,"Move constructor for transferring resources from another SamplesPacket.","SamplesPacket(SamplesPacket &&pkt)","pkt","SamplesPacket&&","Temporary SamplesPacket object to transfer resources from.","None","Transfers ownership of the resources."
"dataTypes.h","operator=(pkt&&)",,"Move assignment operator for transferring resources between SamplesPacket.","SamplesPacket& operator=(SamplesPacket &&pkt)","pkt","SamplesPacket&&","Temporary SamplesPacket object to transfer resources from.","SamplesPacket&","Transfers ownership and returns a reference to the current object."
"dataTypes.h","~SamplesPacket()",,"Destructor to release resources allocated within the SamplesPacket object.","~SamplesPacket()","None","None","No parameters required.","None","Frees memory allocated for the samples array."
"dataTypes.h",,"FPGA_DataPacket","Struct defining an FPGA data packet with a counter and data buffer.","Not applicable","Not applicable","Not applicable","Contains reserved space, a counter, and a data buffer for 4080 bytes.","Not applicable","Struct definition, used for FPGA data storage."
"dataTypes.h",,"complex16_t","Struct for representing complex numbers with 16-bit integer components.","Not applicable","Not applicable","Not applicable","Includes int16_t fields for the real (i) and imaginary (q) parts.","Not applicable","Struct definition, used for complex number representation."
"dataTypes.h",,"samples12InPkt","Constant for the number of 12-bit samples in a packet.","Not applicable","Not applicable","Not applicable","Defines the size as 1360 samples.","Not applicable","Constant definition."
"dataTypes.h",,"samples16InPkt","Constant for the number of 16-bit samples in a packet.","Not applicable","Not applicable","Not applicable","Defines the size as 1020 samples.","Not applicable","Constant definition."
"fifo.txt","BufferInfo",,"Struct for storing buffer-related statistics like size, items filled, overflow, and underflow counts.","Not applicable","Not applicable","Not applicable","Member variable structure with fields for size, itemsFilled, overflow, and underflow.","Not applicable","Struct definition used to hold buffer statistics."
"fifo.txt","StreamFlags","SYNC_TIMESTAMP, END_BURST","Enum for stream flags including synchronization and burst-ending signals.","Not applicable","Not applicable","Not applicable","Member variable enumeration with flags for stream behavior.","Not applicable","Enum definition used for flags in sample insertion and retrieval."
"fifo.txt","GetInfo()",,"Retrieves information about FIFO size and fullness, and resets overflow and underflow counters.","BufferInfo GetInfo()","None","None","No parameters required.","BufferInfo","Returns buffer statistics like size, items filled, and counters for overflow/underflow."
"fifo.txt","RingFIFO()",,"Constructor for initializing FIFO memory with default values.","RingFIFO()","None","None","No parameters required.","None","Initializes the FIFO buffer with default values."
"fifo.txt","~RingFIFO()",,"Destructor for releasing FIFO memory resources.","~RingFIFO()","None","None","No parameters required.","None","Frees allocated FIFO memory and resources."
"fifo.txt","push_packet()",,"Inserts a packet into the FIFO buffer in a thread-safe manner.","void push_packet(SamplesPacket &packet)","packet","SamplesPacket&","Reference to a SamplesPacket object containing data to be inserted.","void","Adds the packet to the FIFO buffer."
"fifo.txt","push_samples()",,"Inserts samples into the FIFO buffer with thread safety and optional timeout.","uint32_t push_samples(complex16_t *buffer, uint32_t samplesCount, uint64_t timestamp, uint32_t timeout_ms, uint32_t flags)","buffer, samplesCount, timestamp, timeout_ms, flags","complex16_t*, uint32_t, uint64_t, uint32_t, uint32_t","Data array, sample count, timestamp, timeout duration, and optional flags for samples.","uint32_t","Returns the number of samples successfully inserted into the FIFO buffer."
"fifo.txt","pop_samples()",,"Retrieves samples from the FIFO buffer in a thread-safe manner.","uint32_t pop_samples(complex16_t *buffer, uint32_t samplesCount, uint64_t *timestamp, uint32_t timeout_ms)","buffer, samplesCount, timestamp, timeout_ms","complex16_t*, uint32_t, uint64_t*, uint32_t","Destination buffer array, sample count, timestamp, and timeout duration.","uint32_t","Returns the number of samples successfully retrieved from the FIFO buffer."
"fifo.txt","pop_packet()",,"Retrieves a packet from the FIFO buffer in a thread-safe manner.","void pop_packet(SamplesPacket &packet)","packet","SamplesPacket&","Reference to a SamplesPacket object to store the retrieved packet.","void","Retrieves a packet from the FIFO buffer and stores it in the given object."
"fifo.txt","Resize()",,"Adjusts the size of the FIFO buffer and its packet size.","void Resize(int pktSize, int bufSize = -1)","pktSize, bufSize","int, int","Packet size and buffer size for resizing the FIFO buffer.","void","Resizes the FIFO buffer memory allocation."
"fifo.txt","Clear()",,"Clears the FIFO buffer by resetting its internal counters and indices.","void Clear()","None","None","No parameters required.","void","Resets all FIFO buffer counters and indices."
"FPGA_common.h","FPGA()",,"Constructor to initialize the FPGA object.","FPGA()","None","None","No parameters required.","None","Initializes the FPGA object."
"FPGA_common.h","~FPGA()",,"Virtual destructor to release FPGA-related resources.","~FPGA()","None","None","No parameters required.","None","Cleans up FPGA object resources."
"FPGA_common.h","SetConnection(conn)",,"Associates a connection object with the FPGA instance.","SetConnection(IConnection* conn)","conn","IConnection*","Pointer to the connection object.","void","Sets the connection to the FPGA object."
"FPGA_common.h","GetConnection()",,"Returns the current connection object associated with the FPGA instance.","IConnection* GetConnection()","None","None","No parameters required.","IConnection*","Pointer to the currently associated connection object."
"FPGA_common.h","StartStreaming()",,"Initiates streaming operations on the FPGA instance.","int StartStreaming()","None","None","No parameters required.","int","Returns success or failure code for the streaming operation."
"FPGA_common.h","StopStreaming()",,"Terminates streaming operations on the FPGA instance.","int StopStreaming()","None","None","No parameters required.","int","Returns success or failure code for stopping streaming."
"FPGA_common.h","ResetTimestamp()",,"Resets the internal timestamp of the FPGA instance.","int ResetTimestamp()","None","None","No parameters required.","int","Returns success or failure code for the reset operation."
"FPGA_common.h","UploadWFM(samples, ...)",,"Uploads waveform samples to the FPGA for transmission.","int UploadWFM(const void* const* samples, ...)","samples, chCount, sample_count, format, epIndex","void*, uint8_t, size_t, StreamConfig::StreamDataFormat, int","Pointer to waveform data, channel count, sample count, data format, and endpoint index.","int","Returns success or failure code for waveform upload."
"FPGA_common.h","DetectRefClk(fx3Clk)",,"Detects the reference clock frequency.","double DetectRefClk(double fx3Clk = 100e6)","fx3Clk","double","Optional reference clock frequency input.","double","Returns the detected reference clock frequency."
"FPGA_common.h","FPGAPacketPayload2Samples(...)",,"Converts FPGA packet payload into sample data.","int FPGAPacketPayload2Samples(const uint8_t* buffer, ...)","buffer, bufLen, mimo, compressed, samples","uint8_t*, int, bool, bool, complex16_t**","Input buffer, buffer length, MIMO flag, compressed flag, and output samples.","int","Returns success or failure code for the conversion operation."
"FPGA_common.h","Samples2FPGAPacketPayload(...)",,"Converts sample data into FPGA packet payload.","int Samples2FPGAPacketPayload(const complex16_t* const* samples, ...)","samples, samplesCount, mimo, compressed, buffer","complex16_t*, int, bool, bool, uint8_t*","Input samples, sample count, MIMO flag, compressed flag, and output buffer.","int","Returns success or failure code for the conversion operation."
"FPGA_common.h","WriteRegisters(addrs, data, cnt)",,"Writes to multiple FPGA registers based on provided addresses and data values.","int WriteRegisters(const uint32_t *addrs, const uint32_t *data, unsigned cnt)","addrs, data, cnt","uint32_t*, uint32_t*, unsigned","Arrays of addresses and data, and the count of registers to write to.","int","Returns success or failure code for the write operation."
"FPGA_common.h","ReadRegisters(addrs, data, cnt)",,"Reads from multiple FPGA registers based on provided addresses.","int ReadRegisters(const uint32_t *addrs, uint32_t *data, unsigned cnt)","addrs, data, cnt","uint32_t*, uint32_t*, unsigned","Array of addresses to read from, output data array, and count of registers to read.","int","Returns success or failure code for the read operation."
"IConnection.h","IConnection()",,"Constructor to initialize the connection interface for Lime RFIC devices.","IConnection()","None","None","No parameters required.","None","Constructs a connection object."
"IConnection.h","~IConnection()",,"Virtual destructor to release connection-related resources.","~IConnection()","None","None","No parameters required.","None","Cleans up the connection resources."
"IConnection.h","GetHandle()",,"Retrieves the connection handle associated with the object.","const ConnectionHandle &GetHandle()","None","None","No parameters required.","ConnectionHandle &","Provides the connection handle used to create this connection."
"IConnection.h","IsOpen()",,"Checks if the connection is currently open and operational.","bool IsOpen()","None","None","No parameters required.","bool","Returns true if the connection is open; false otherwise."
"IConnection.h","GetDeviceInfo()",,"Retrieves details about the connected device, including firmware and hardware versions.","DeviceInfo GetDeviceInfo()","None","None","No parameters required.","DeviceInfo","Returns a structure containing device information like versions and serial number."
"IConnection.h","TransactSPI(addr, ...)",,"Executes a bulk SPI read/write transaction with the device.","int TransactSPI(int addr, const uint32_t *writeData, uint32_t *readData, size_t size)","addr, writeData, readData, size","int, uint32_t*, uint32_t*, size_t","SPI address, data to write, read data buffer, and transaction count.","int","Returns success or failure code for the SPI transaction."
"IConnection.h","WriteI2C(addr, data)",,"Writes data to an I2C slave device.","int WriteI2C(int addr, const std::string &data)","addr, data","int, std::string","I2C slave address and data to write.","int","Returns success or failure code for the I2C write operation."
"IConnection.h","ReadI2C(addr, numBytes, data)",,"Reads data from an I2C slave device.","int ReadI2C(int addr, size_t numBytes, std::string &data)","addr, numBytes, data","int, size_t, std::string &","I2C slave address, number of bytes to read, and buffer for read data.","int","Returns success or failure code for the I2C read operation."
"IConnection.h","DeviceReset(ind)",,"Performs a reset operation on the connected device.","int DeviceReset(int ind = 0)","ind","int","Index for specifying the target device for reset (optional).","int","Returns success or failure code for the reset operation."
"IConnection.h","ProgramWrite(buffer, ...)",,"Uploads binary data to the device memory, such as RAM, FLASH, or EEPROM.","int ProgramWrite(const char *buffer, size_t length, int programmingMode, int index, ProgrammingCallback callback = 0)","buffer, length, programmingMode, index, callback","const char*, size_t, int, int, ProgrammingCallback","Binary data, length, programming mode, target device index, and optional callback.","int","Returns success or failure code for the programming operation."
"IConnection.h","ProgramMCU(buffer, ...)","MCU_PROG_MODE","Uploads program to the device's MCU using specified programming modes.","int ProgramMCU(const uint8_t *buffer, size_t length, MCU_PROG_MODE mode, ProgrammingCallback callback = 0)","buffer, length, mode, callback","const uint8_t*, size_t, MCU_PROG_MODE, ProgrammingCallback","Binary data, length, programming mode, and optional callback.","int","Returns success code for MCU programming."
"IConnection.h","GPIOWrite(buffer, bufLength)",,"Writes values to the device's GPIO pins.","int GPIOWrite(const uint8_t *buffer, size_t bufLength)","buffer, bufLength","const uint8_t*, size_t","GPIO values to write and their buffer length.","int","Returns success code for GPIO write operation."
"IConnection.h","GPIORead(buffer, bufLength)",,"Reads values from the device's GPIO pins.","int GPIORead(uint8_t *buffer, size_t bufLength)","buffer, bufLength","uint8_t*, size_t","Buffer to store GPIO values and its length.","int","Returns success code for GPIO read operation."
"limeRFE.h","RFE_Open","RFE_I2C_ADDRESS","Opens a LimeRFE device for communication.","RFE_Open(const char* serialport, lms_device_t* dev)","serialport, dev","const char*, lms_device_t*","Serial port for USB or SDR device for board control.","rfe_dev_t*","Returns a handle for the LimeRFE device."
"limeRFE.h","RFE_Close",,"Closes an opened LimeRFE device.","RFE_Close(rfe_dev_t* rfe)","rfe","rfe_dev_t*","Handle obtained from RFE_Open.","void","Releases the device handle."
"limeRFE.h","RFE_GetInfo",,"Retrieves LimeRFE firmware, hardware version, and status bytes.","RFE_GetInfo(rfe_dev_t* rfe, unsigned char* cinfo)","rfe, cinfo","rfe_dev_t*, unsigned char*","Device handle and output buffer for firmware, hardware, and status info.","int","Returns 0 on success; error code otherwise."
"limeRFE.h","RFE_LoadConfig",,"Loads LimeRFE configuration from an .ini file.","RFE_LoadConfig(rfe_dev_t* rfe, const char* filename)","rfe, filename","rfe_dev_t*, const char*","Device handle and path to the configuration file.","int","Returns 0 on success; error code otherwise."
"limeRFE.h","RFE_Reset",,"Resets the LimeRFE board.","RFE_Reset(rfe_dev_t* rfe)","rfe","rfe_dev_t*","Device handle.","int","Returns 0 on success; error code otherwise."
"limeRFE.h","RFE_Configure",,"Configures the LimeRFE device with specified parameters.","RFE_Configure(rfe_dev_t* rfe, char channelIDRX, ...)","rfe, channelIDRX, channelIDTX, portRX, portTX, mode, notch, attenuation, enableSWR, sourceSWR","rfe_dev_t*, char, ...","Device handle and parameters like channels, ports, modes, notch, attenuation, and SWR configuration.","int","Returns 0 on success; error code otherwise."
"limeRFE.h","RFE_ConfigureState",,"Configures the LimeRFE device using a state structure.","RFE_ConfigureState(rfe_dev_t* rfe, rfe_boardState state)","rfe, state","rfe_dev_t*, rfe_boardState","Device handle and configuration state structure.","int","Returns 0 on success; error code otherwise."
"limeRFE.h","RFE_GetState",,"Retrieves the current state of the LimeRFE device.","RFE_GetState(rfe_dev_t* rfe, rfe_boardState* state)","rfe, state","rfe_dev_t*, rfe_boardState*","Device handle and output state structure pointer.","int","Returns 0 on success; error code otherwise."
"limeRFE.h","RFE_Mode","RFE_MODE_RX, RFE_MODE_TX, ...","Sets the LimeRFE mode (e.g., receive, transmit, or both).","RFE_Mode(rfe_dev_t* rfe, int mode)","rfe, mode","rfe_dev_t*, int","Device handle and operation mode.","int","Returns 0 on success; error code otherwise."
"limeRFE.h","RFE_ReadADC","RFE_ADC1, RFE_ADC2","Reads the specified ADC value.","RFE_ReadADC(rfe_dev_t* rfe, int adcID, int* value)","rfe, adcID, value","rfe_dev_t*, int, int*","Device handle, ADC identifier, and output value.","int","Returns 0 on success; error code otherwise."
"limeRFE.h","RFE_ConfGPIO","RFE_GPIO4, RFE_GPIO5","Configures a GPIO pin as input or output.","RFE_ConfGPIO(rfe_dev_t* rfe, int gpioNum, int dir)","rfe, gpioNum, dir","rfe_dev_t*, int, int","Device handle, GPIO pin number, and direction (input/output).","int","Returns 0 on success; error code otherwise."
"limeRFE.h","RFE_SetGPIO",,"Sets the value of a GPIO pin configured as output.","RFE_SetGPIO(rfe_dev_t* rfe, int gpioNum, int val)","rfe, gpioNum, val","rfe_dev_t*, int, int","Device handle, GPIO pin number, and value to set.","int","Returns 0 on success; error code otherwise."
"limeRFE.h","RFE_GetGPIO",,"Reads the value of a GPIO pin configured as input.","RFE_GetGPIO(rfe_dev_t* rfe, int gpioNum, int* val)","rfe, gpioNum, val","rfe_dev_t*, int, int*","Device handle, GPIO pin number, and output value pointer.","int","Returns 0 on success; error code otherwise."
"limeRFE.h","RFE_AssignSDRChannels",,"Assigns LimeRFE Rx and Tx to specific SDR board channels.","RFE_AssignSDRChannels(rfe_dev_t* rfe, int rxChan, int txChan)","rfe, rxChan, txChan","rfe_dev_t*, int, int","Device handle and SDR channel indices for Rx and Tx.","int","Returns 0 on success; error code otherwise."
"limeRFE.h","RFE_Fan",,"Enables or disables the LimeRFE fan.","RFE_Fan(rfe_dev_t* rfe, int enable)","rfe, enable","rfe_dev_t*, int","Device handle and fan state (0 for off, 1 for on).","int","Returns 0 on success; error code otherwise."
"LimeSuite.h","LMS_GetDeviceList","LMS_SUCCESS, LMS_TESTSIG_NONE, ...","Obtains a list of Lime devices attached to the system.","LMS_GetDeviceList(lms_info_str_t *dev_list)","dev_list","lms_info_str_t*","List to hold available devices.","int","Number of devices found; returns (-1) on failure."
"LimeSuite.h","LMS_Open",,"Opens a device specified by the provided device info string.","LMS_Open(lms_device_t **device, const lms_info_str_t info, void *args)","device, info, args","lms_device_t**, lms_info_str_t, void*","Device handle, device info string, and additional arguments.","int","Returns 0 on success; (-1) on failure."
"LimeSuite.h","LMS_Close",,"Closes a device handle previously obtained via LMS_Open.","LMS_Close(lms_device_t *device)","device","lms_device_t*","Device handle to close.","int","Returns 0 on success; (-1) on failure."
"LimeSuite.h","LMS_Init","LMS_TESTSIG_NCODIV8, LMS_CH_TX, LMS_PATH_TX1","Configures the LMS chip, making it ready for operation.","LMS_Init(lms_device_t *device)","device","lms_device_t*","Device handle previously obtained by LMS_Open.","int","Returns 0 on success; (-1) on failure."
"LimeSuite.h","LMS_SetSampleRate","LMS_FMT_F32, LMS_FMT_I16","Sets sampling rate for all RX/TX channels.","LMS_SetSampleRate(lms_device_t *device, float_type rate, size_t oversample)","device, rate, oversample","lms_device_t*, float_type, size_t","Device handle, sampling rate, and RF oversampling ratio.","int","Returns 0 on success; (-1) on failure."
"LimeSuite.h","LMS_GetSampleRateRange","LMS_PATH_LNAH, LMS_PATH_LNAW","Gets the supported range of sampling rates.","LMS_GetSampleRateRange(lms_device_t *device, bool dir_tx, lms_range_t *range)","device, dir_tx, range","lms_device_t*, bool, lms_range_t*","Device handle, direction (TX/RX), and structure to hold range details.","int","Returns 0 on success; (-1) on failure."
"LimeSuite.h","LMS_SetLOFrequency","LMS_CLOCK_REF, LMS_CLOCK_TXTSP","Sets RF center frequency for a given channel.","LMS_SetLOFrequency(lms_device_t *device, bool dir_tx, size_t chan, float_type frequency)","device, dir_tx, chan, frequency","lms_device_t*, bool, size_t, float_type","Device handle, direction (TX/RX), channel index, and desired RF center frequency.","int","Returns 0 on success; (-1) on failure."
"LimeSuite.h","LMS_Calibrate","LMS_CLOCK_EXTREF, LMS_CLOCK_SXR","Performs automatic calibration of the RX/TX channels.","LMS_Calibrate(lms_device_t *device, bool dir_tx, size_t chan, double bw, unsigned flags)","device, dir_tx, chan, bw, flags","lms_device_t*, bool, size_t, double, unsigned","Device handle, direction (TX/RX), channel, bandwidth, and calibration flags.","int","Returns 0 on success; (-1) on failure."
"LimeSuite.h","LMS_SetNormalizedGain","LMS_ALIGN_CH_PHASE","Sets combined gain value in normalized range [0, 1.0].","LMS_SetNormalizedGain(lms_device_t *device, bool dir_tx, size_t chan, float_type gain)","device, dir_tx, chan, gain","lms_device_t*, bool, size_t, float_type","Device handle, direction (TX/RX), channel index, and desired normalized gain.","int","Returns 0 on success; (-1) on failure."
"LimeSuite.h","LMS_GetChipTemperature","BOARD_PARAM_TEMP, LMS_DEV_INFO","Reads the internal temperature sensor of LMS7 chip.","LMS_GetChipTemperature(lms_device_t *device, size_t ind, float_type *temp)","device, ind, temp","lms_device_t*, size_t, float_type*","Device handle, chip index, and pointer for temperature value.","int","Returns 0 on success; (-1) on failure."
"LimeSuite.h","LMS_SetupStream","LMS_NCO_VAL_COUNT, LMS_GFIR3","Creates a stream for sending or receiving IQ data samples.","LMS_SetupStream(lms_device_t *device, lms_stream_t *stream)","device, stream","lms_device_t*, lms_stream_t*","Device handle and structure for stream configuration.","int","Returns 0 on success; (-1) on failure."
"LimeSuiteConfig.h","LIME_API","LIME_HELPER_DLL_EXPORT","Macro definition for API visibility in shared or static library builds.","LIME_API","None","None","Indicates whether the symbol is visible or hidden in the compiled library.","None","Not applicable."
"LimeSuiteConfig.h",,"LIME_DLL","Preprocessor directive for dynamic linking support.","#ifdef LIME_DLL","None","None","Defined if LimeSuite is built as a shared dynamic-link library (DLL).","None","Not applicable."
"LimeSuiteConfig.h",,"LIME_LOCAL","Macro for defining non-public symbols in library builds.","#define LIME_LOCAL","None","None","Marks internal-use-only API symbols in static or dynamic library builds.","None","Not applicable."
"LimeSuiteConfig.h",,"LIME_HELPER_DLL_IMPORT","Macro indicating a DLL import (visibility modifier).","__declspec(dllimport) (on Windows)","None","None","Used for importing symbols from another DLL.","None","Not applicable."
"LimeSuiteConfig.h",,"LIME_HELPER_DLL_EXPORT","Macro indicating a DLL export (visibility modifier).","__declspec(dllexport) (on Windows)","None","None","Used for exporting symbols from the compiled LimeSuite library.","None","Not applicable."
"LimeSuiteConfig.h",,"LIME_HELPER_DLL_LOCAL","Macro for marking symbols as hidden in shared builds.","__attribute__((visibility(""hidden""))) (on GCC)","None","None","Used to restrict visibility of certain symbols to within the shared library.","None","Not applicable."
"LimeSuiteConfig.h",,"LIME_DLL_EXPORTS","Preprocessor directive indicating DLL compilation mode.","#ifdef LIME_DLL_EXPORTS","None","None","Defined when LimeSuite is being built as a DLL.","None","Not applicable."
"lms7_device.h","LMS7_Device",,"Constructor for initializing an LMS7 device object.","LMS7_Device(LMS7_Device *obj)","obj","LMS7_Device*","Optional pointer to clone another LMS7 device object.","None","Creates a new LMS7 device object."
"lms7_device.h","~LMS7_Device",,"Destructor for cleaning up LMS7 device resources.","~LMS7_Device()","None","None","No parameters required.","None","Cleans up all resources allocated for LMS7 device."
"lms7_device.h","Init",,"Initializes the LMS7 device.","Init()","None","None","No parameters required.","int","Returns 0 on success; error code otherwise."
"lms7_device.h","EnableChannel",,"Enables or disables a specific RX or TX channel.","EnableChannel(bool dir_tx, unsigned chan, bool enabled)","dir_tx, chan, enabled","bool, unsigned, bool","Direction (TX/RX), channel index, and enable/disable flag.","int","Returns 0 on success; error code otherwise."
"lms7_device.h","Reset",,"Resets the LMS7 device.","Reset()","None","None","No parameters required.","int","Returns 0 on success; error code otherwise."
"lms7_device.h","SetRate",,"Configures the sample rate for RX/TX channels.","SetRate(double f_MHz, int oversample)","f_MHz, oversample","double, int","Sample rate in MHz and oversampling factor.","int","Returns 0 on success; error code otherwise."
"lms7_device.h","SetFrequency",,"Sets the RF center frequency for a given channel.","SetFrequency(bool tx, unsigned chan, double f_Hz)","tx, chan, f_Hz","bool, unsigned, double","Direction (TX/RX), channel index, and center frequency in Hz.","int","Returns 0 on success; error code otherwise."
"lms7_device.h","GetGain",,"Retrieves the gain for a specified channel.","GetGain(bool dir_tx, unsigned chan, const std::string &name)","dir_tx, chan, name","bool, unsigned, std::string","Direction (TX/RX), channel index, and gain block name.","double","Returns the current gain value."
"lms7_device.h","SetGFIRCoef",,"Configures GFIR coefficients for a specific channel.","SetGFIRCoef(bool tx, unsigned chan, lms_gfir_t filt, const double* coef, unsigned count)","tx, chan, filt, coef, count","bool, unsigned, lms_gfir_t, double*, unsigned","Direction (TX/RX), channel, filter type, coefficient array, and number of coefficients.","int","Returns 0 on success; error code otherwise."
"lms7_device.h","GetHardwareTimestamp",,"Retrieves the current hardware timestamp of the LMS7 device.","GetHardwareTimestamp()","None","None","No parameters required.","uint64_t","Returns the current timestamp in hardware ticks."
"lms7_device.h","Synchronize",,"Synchronizes the LMS7 device configuration with the internal chip settings.","Synchronize(bool toChip)","toChip","bool","Flag indicating synchronization direction (to chip or from chip).","int","Returns 0 on success; error code otherwise."
"lms7_device.h","LoadConfig",,"Loads a configuration file into the LMS7 device.","LoadConfig(const char *filename, int ind)","filename, ind","const char*, int","File path to the configuration file and optional device index.","int","Returns 0 on success; error code otherwise."
"lms7_device.h","SaveConfig",,"Saves the current LMS7 device configuration into a file.","SaveConfig(const char *filename, int ind)","filename, ind","const char*, int","File path to save the configuration and optional device index.","int","Returns 0 on success; error code otherwise."
"lms7_device.h","ReadLMSReg",,"Reads a register value from the LMS7 chip.","ReadLMSReg(uint16_t address, int ind)","address, ind","uint16_t, int","Register address and optional chip index.","int","Returns the register value on success; error code otherwise."
"lms7_device.h","WriteLMSReg",,"Writes a value to a register on the LMS7 chip.","WriteLMSReg(uint16_t address, uint16_t val, int ind)","address, val, ind","uint16_t, uint16_t, int","Register address, value to write, and optional chip index.","int","Returns 0 on success; error code otherwise."
"LMS64CCommands.h",,"CMD_GET_INFO","Retrieves information about the LMS device.","Not applicable","None","None","Command enumeration for device info retrieval.","None","Not applicable."
"LMS64CCommands.h",,"CMD_LMS6002_RST","Resets the LMS6002 chip.","Not applicable","None","None","Command enumeration for chip reset.","None","Not applicable."
"LMS64CCommands.h",,"CMD_SI5356_WR, CMD_SI5356_RD","Writes or reads data to/from the SI5356 synthesizer via I2C.","Not applicable","None","None","Command enumeration for SI5356 read/write operations.","None","Not applicable."
"LMS64CCommands.h",,"CMD_LMS7002_WR, CMD_LMS7002_RD","Writes or reads data to/from the LMS7002M chip via SPI.","Not applicable","None","None","Command enumeration for LMS7002M read/write operations.","None","Not applicable."
"LMS64CCommands.h",,"CMD_PROG_MCU","Programs the MCU connected to the LMS device.","Not applicable","None","None","Command enumeration for MCU programming.","None","Not applicable."
"LMS64CCommands.h",,"CMD_GPIO_DIR_WR, CMD_GPIO_DIR_RD, CMD_GPIO_WR, CMD_GPIO_RD","Configures, writes, or reads GPIO pin directions and values.","Not applicable","None","None","Command enumeration for GPIO operations.","None","Not applicable."
"LMS64CCommands.h",,"CMD_MYRIAD_WR, CMD_MYRIAD_RD","Writes or reads data to/from the Myriad FPGA.","Not applicable","None","None","Command enumeration for Myriad FPGA operations.","None","Not applicable."
"LMS64CCommands.h",,"STATUS_COMPLETED_CMD, STATUS_BUSY_CMD, STATUS_ERROR_CMD, etc.","Status codes representing the result of a command operation.","status2string(int status)","status","int","Status code to retrieve its string representation.","const char*","Returns a string description of the status code (e.g., ""Completed"", ""Busy"")."
"LMS64CProtocol.h","LMS64CProtocol()",,"Constructor to initialize LMS64CProtocol.","LMS64CProtocol()","None","None","No parameters required.","None","Initializes the LMS64CProtocol object."
"LMS64CProtocol.h","~LMS64CProtocol()",,"Destructor to clean up resources associated with LMS64CProtocol.","~LMS64CProtocol()","None","None","No parameters required.","None","Cleans up LMS64CProtocol resources."
"LMS64CProtocol.h","GetDeviceInfo()",,"Retrieves device information such as serial number, firmware version, and hardware specs.","DeviceInfo GetDeviceInfo()","None","None","No parameters required.","DeviceInfo","Returns a DeviceInfo object containing device information."
"LMS64CProtocol.h","DeviceReset(ind)",,"Performs a reset operation on the connected device.","int DeviceReset(int ind = 0)","ind","int","Device index to specify which connected device to reset (optional).","int","Returns 0 on success; error code otherwise."
"LMS64CProtocol.h","TransactSPI(addr, ...)",,"Executes SPI read/write transactions on the LMS64CProtocol device.","int TransactSPI(const int addr, const uint32_t *writeData, uint32_t *readData, const size_t size)","addr, writeData, readData, size","int, uint32_t*, uint32_t*, size_t","SPI address, data to write, data buffer for reading, and transaction size.","int","Returns 0 on success; error code otherwise."
"LMS64CProtocol.h","WriteI2C(addr, data)",,"Writes data to a device via I2C protocol.","int WriteI2C(const int addr, const std::string &data)","addr, data","int, std::string","I2C device address and data to write.","int","Returns 0 on success; error code otherwise."
"LMS64CProtocol.h","ReadI2C(addr, numBytes, data)",,"Reads data from a device via I2C protocol.","int ReadI2C(const int addr, const size_t numBytes, std::string &data)","addr, numBytes, data","int, size_t, std::string &","I2C device address, number of bytes to read, and buffer for storing read data.","int","Returns 0 on success; error code otherwise."
"LMS64CProtocol.h","WriteRegisters(addrs, ...)",,"Writes data to specified registers using BRDSPI protocol.","int WriteRegisters(const uint32_t *addrs, const uint32_t *data, const size_t size)","addrs, data, size","uint32_t*, uint32_t*, size_t","Register addresses, data values, and number of registers to write.","int","Returns 0 on success; error code otherwise."
"LMS64CProtocol.h","ReadRegisters(addrs, ...)",,"Reads data from specified registers using BRDSPI protocol.","int ReadRegisters(const uint32_t *addrs, uint32_t *data, const size_t size)","addrs, data, size","uint32_t*, uint32_t*, size_t","Register addresses, data buffer, and number of registers to read.","int","Returns 0 on success; error code otherwise."
"LMS64CProtocol.h","TransferPacket(pkt)",,"Transfers a packet using the LMS64CProtocol communication layer.","int TransferPacket(GenericPacket &pkt)","pkt","GenericPacket &","A generic packet structure containing input and output buffers.","int","Returns 0 on success; error code otherwise."
"LMS64CProtocol.h","GetInfo()",,"Retrieves detailed information about the LMS64CProtocol instance.","LMSinfo GetInfo()","None","None","No parameters required.","LMSinfo","Returns an LMSinfo structure with hardware, firmware, and protocol details."
"LMS64CProtocol.h","GetFPGAInfo()",,"Retrieves FPGA-specific details, including gateware and hardware versions.","FPGAinfo GetFPGAInfo()","None","None","No parameters required.","FPGAinfo","Returns an FPGAinfo structure with board and gateware details."
"LMS64CProtocol.h","ProgramWrite(buffer, ...)","ProgramWriteTarget (HPM, FX3, ...)","Writes program data to the specified target (e.g., FPGA, FX3).","int ProgramWrite(const char *buffer, size_t length, int programmingMode, int device, ProgrammingCallback callback = nullptr)","buffer, length, programmingMode, device, callback","const char*, size_t, int, int, ProgrammingCallback","Data buffer, buffer length, programming mode, target device, and optional callback.","int","Returns 0 on success; error code otherwise."
"LMS7002M.h","SetConnection",,"Sets the connection interface for LMS7002M driver.","SetConnection(IConnection *port, size_t devIndex = 0)","port, devIndex","IConnection *, size_t","Interface connection and RFIC index to configure (default 0).","void","Configures LMS7002M connection."
"LMS7002M.h","GetConnection",,"Retrieves the active interface connection for LMS7002M.","GetConnection()","None","None","No parameters required.","IConnection *","Returns the interface connection object."
"LMS7002M.h","SetActiveChannel","Channel","Sets the selected channel (ChA/ChB/ChAB).","SetActiveChannel(Channel ch)","ch","Channel","Channel enumeration value.","void","Updates the currently active channel."
"LMS7002M.h","GetActiveChannel","Channel","Gets the currently selected channel.","GetActiveChannel(bool fromChip = true)","fromChip","bool","Whether to fetch from the chip or cached value.","Channel","Returns the active channel."
"LMS7002M.h","EnableChannel",,"Enables/disables all hardware components for a selected TX or RX channel.","EnableChannel(bool isTx, bool enable)","isTx, enable","bool, bool","Direction (TX/RX) and enable/disable flag.","int","Returns 0 on success; error code otherwise."
"LMS7002M.h","SoftReset",,"Performs a soft reset sequence over SPI for LMS7002M.","SoftReset()","None","None","No parameters required.","int","Returns 0 on success; error code otherwise."
"LMS7002M.h","LoadConfig",,"Loads a configuration file into the LMS7002M chip.","LoadConfig(const char *filename)","filename","const char *","File path to configuration.","int","Returns 0 on success; error code otherwise."
"LMS7002M.h","Get_SPI_Reg_bits",,"Reads specific bits from an SPI register.","Get_SPI_Reg_bits(uint16_t address, uint8_t msb, uint8_t lsb, bool fromChip = false)","address, msb, lsb, fromChip","uint16_t, uint8_t, uint8_t, bool","SPI register address, bit range, and source flag.","uint16_t","Returns value of bits read."
"LMS7002M.h","CalibrateRx",,"Performs RX calibration with optional external loopback.","CalibrateRx(float_type bandwidth, bool useExtLoopback = false)","bandwidth, useExtLoopback","float_type, bool","RX bandwidth and external loopback flag.","int","Returns 0 on success; error code otherwise."
"LMS7002M.h","CalibrateTx",,"Performs TX calibration with optional external loopback.","CalibrateTx(float_type bandwidth, bool useExtLoopback = false)","bandwidth, useExtLoopback","float_type, bool","TX bandwidth and external loopback flag.","int","Returns 0 on success; error code otherwise."
"LMS7002M.h","TuneRxFilter",,"Tunes the RX filter to a specified frequency.","TuneRxFilter(float_type rx_lpf_freq_RF)","rx_lpf_freq_RF","float_type","RX low pass filter frequency.","int","Returns 0 on success; error code otherwise."
"LMS7002M.h","SetPathRFE","PathRFE","Configures the RFE input path.","SetPathRFE(PathRFE path)","path","PathRFE","RFE path enumeration (e.g., PATH_RFE_LNAL).","int","Returns 0 on success; error code otherwise."
"LMS7002M.h","GetPathRFE","PathRFE","Retrieves the currently set RFE path.","GetPathRFE()","None","None","No parameters required.","PathRFE","Returns the current RFE path."
"LMS7002M.h","SetFrequencyCGEN","CGEN_details","Sets the frequency for the Clock Generator (CGEN).","SetFrequencyCGEN(float_type freq_Hz, bool retainNCOfrequencies = false, CGEN_details *output = nullptr)","freq_Hz, retainNCOfrequencies, output","float_type, bool, CGEN_details *","Clock frequency, NCO retention flag, and output details pointer.","int","Returns 0 on success; error code otherwise."
"LMS7002M.h","SetGFIRCoefficients",,"Configures the coefficients for GFIR filters.","SetGFIRCoefficients(bool tx, uint8_t GFIR_index, const int16_t *coef, uint8_t coefCount)","tx, GFIR_index, coef, coefCount","bool, uint8_t, int16_t *, uint8_t","Direction (TX/RX), filter index, coefficients array, and count.","int","Returns 0 on success; error code otherwise."
"LMS7002M.h","SetIQBalance",,"Sets the IQ imbalance correction parameters for TX or RX.","SetIQBalance(bool tx, float_type phase, float_type gainI, float_type gainQ)","tx, phase, gainI, gainQ","bool, float_type, float_type, float_type","Direction (TX/RX), phase offset, and I/Q gain adjustments.","int","Returns 0 on success; error code otherwise."
"LMS7002M_parameters.h","LMS7ParameterCompare","None","Compares two LMS7Parameter structs.","LMS7ParameterCompare(a,b)","a, b","LMS7Parameter","Two LMS7Parameter structs to be compared.","int","Returns a comparison result; implementation not provided in the header file."
"LMS7002M_parameters.h","None","LMS7_LRST_TX_B","Resets all the logic registers to the default state for Tx MIMO channel B.","Not Applicable","None","None","No parameters applicable.","None","None"
"LMS7002M_parameters.h","None","LMS7_MRST_TX_B","Resets all the configuration memory to the default state for Tx MIMO channel B.","Not Applicable","None","None","No parameters applicable.","None","None"
"LMS7002M_parameters.h","None","LMS7_MAC","Selects MIMO channel for communication.","Not Applicable","None","None","No parameters applicable.","None","None"
"LMS7002M_parameters.h","None","LMS7_TXRDCLK_MUX","TX FIFO read clock selection.","Not Applicable","None","None","No parameters applicable.","None","None"
"LMS7002M_RegistersMap.h","GetValue","None","Retrieves the value at a specified address on a specified channel.","GetValue(channel, address)","channel, address","uint8_t, uint16_t","Channel ID and address to read value from.","uint16_t","Returns the register value."
"LMS7002M_RegistersMap.h","SetValue","None","Sets the value at a specified address on a specified channel.","SetValue(channel, address, value)","channel, address, value","uint8_t, uint16_t, uint16_t","Channel ID, address, and new value for the register.","void","No return value."
"LMS7002M_RegistersMap.h","InitializeDefaultValues","None","Initializes the registers to their default values using a parameter list.","InitializeDefaultValues(parameterList)","parameterList","std::vector<const LMS7Parameter*>","A list of LMS7Parameter structs.","void","No return value."
"LMS7002M_RegistersMap.h","GetDefaultValue","None","Retrieves the default value of a register at a given address.","GetDefaultValue(address)","address","uint16_t","Address to retrieve the default value from.","uint16_t","Returns the default value of the register."
"LMS7002M_RegistersMap.h","GetUsedAddresses","None","Provides a list of used register addresses for a specific channel.","GetUsedAddresses(channel)","channel","uint8_t","Channel ID to retrieve used addresses.","std::vector<uint16_t>","Returns a vector of used register addresses."
"LMS7002M_RegistersMap.h","Operator=","None","Assigns the contents of another LMS7002M_RegistersMap to the current instance.","operator=(other)","other","LMS7002M_RegistersMap","Another LMS7002M_RegistersMap instance.","LMS7002M_RegistersMap&","Returns a reference to the current object."
"LMS7002M_RegistersMap.h","mChannelA, mChannelB","std::map<const uint16_t, Register>","Represents register mappings for channels A and B.","Not applicable","None","None","Internal member variables for channel data.","None","None"
"LMSBoards.h","GetDeviceName","eLMS_DEV, LMS_DEV_NAMES","Retrieves the name of a given LMS device.","GetDeviceName(device)","device","eLMS_DEV","An enumerated LMS device type.","const char*","Returns a constant string containing the device name."
"LMSBoards.h","GetExpansionBoardName","eEXP_BOARD, EXP_BOARD_NAMES","Retrieves the name of a given expansion board.","GetExpansionBoardName(board)","board","eEXP_BOARD","An enumerated expansion board type.","const char*","Returns a constant string containing the expansion board name."
"LMSBoards.h","None","LMS_DEV_*","Enumerations representing different LMS hardware devices.","Not Applicable","None","None","No parameters.","None","None"
"LMSBoards.h","None","EXP_BOARD_*","Enumerations representing different expansion boards.","Not Applicable","None","None","No parameters.","None","None"
"Logger.h","lime::critical","LOG_LEVEL_CRITICAL","Log a critical error message.","lime::critical(const char *format, ...)","format, ...","const char*, variadic args","format: printf-style format string; variadic args: additional arguments for formatting.","void","No return value."
"Logger.h","lime::error","LOG_LEVEL_ERROR","Log an error message and return -1.","lime::error(const char *format, ...)","format, ...","const char*, variadic args","format: printf-style format string; variadic args: additional arguments for formatting.","int","Returns -1, indicating an error occurred."
"Logger.h","lime::warning","LOG_LEVEL_WARNING","Log a warning message.","lime::warning(const char *format, ...)","format, ...","const char*, variadic args","format: printf-style format string; variadic args: additional arguments for formatting.","void","No return value."
"Logger.h","lime::info","LOG_LEVEL_INFO","Log an informational message.","lime::info(const char *format, ...)","format, ...","const char*, variadic args","format: printf-style format string; variadic args: additional arguments for formatting.","void","No return value."
"Logger.h","lime::debug","LOG_LEVEL_DEBUG","Log a debugging message.","lime::debug(const char *format, ...)","format, ...","const char*, variadic args","format: printf-style format string; variadic args: additional arguments for formatting.","void","No return value."
"Logger.h","lime::log","N/A","Log a message with the specified logging level.","lime::log(LogLevel level, const char *format, ...)","level, format, ...","LogLevel, const char*, variadic args","level: logging level; format: printf-style format string; variadic args: additional arguments.","void","No return value."
"Logger.h","lime::registerLogHandler","N/A","Register a new system log handler to replace the default stdio handler.","lime::registerLogHandler(LogHandler handler)","handler","LogHandler","handler: function pointer for the log handler.","void","No return value."
"Logger.h","lime::logLevelToName","N/A","Convert a log level to a string name for printing.","lime::logLevelToName(LogLevel level)","level","LogLevel","level: logging level to be converted to string name.","const char*","Returns a string representing the log level."
"Logger.h","lime::GetLastErrorMessage","N/A","Retrieve the last error message reported.","lime::GetLastErrorMessage()","None","None","No parameters.","const char*","Returns a string containing the last error message."
"Logger.h","lime::ReportError","N/A","Report an error code and/or formatted message string.","lime::ReportError(int errnum, const char *format, ...)","errnum, format, ...","int, const char*, variadic args","errnum: recognized error code; format: printf-style format string; variadic args: additional arguments.","int","Returns a non-zero status code indicating an error."
"MCU_BD.h","GetProgressInfo","ProgressInfo","Retrieves progress information of the current operation.","GetProgressInfo()","None","None","No parameters.","ProgressInfo","Returns a ProgressInfo struct containing steps done, total steps, and abort status."
"MCU_BD.h","GetProgramFilename","None","Retrieves the filename of the loaded program.","GetProgramFilename()","None","None","No parameters.","std::string","Returns a string with the loaded program filename."
"MCU_BD.h","RunProcedure","MCU_Parameter","Executes a procedure using the MCU.","RunProcedure(uint8_t id)","id","uint8_t","id: Procedure identifier.","void","No return value."
"MCU_BD.h","SetParameter","MCU_Parameter","Sets a parameter for the MCU.","SetParameter(MCU_Parameter param, float value)","param, value","MCU_Parameter, float","param: Enum for MCU parameter; value: parameter value.","void","No return value."
"MCU_BD.h","WaitForMCU","None","Waits for the MCU to complete its operation within the specified timeout.","WaitForMCU(uint32_t timeout_ms)","timeout_ms","uint32_t","timeout_ms: Timeout in milliseconds.","int","Returns status code; 0 for success, non-zero for failure."
"MCU_BD.h","MCUStatusMessage","None","Converts a status code into a human-readable message.","MCUStatusMessage(const uint8_t code)","code","const uint8_t","code: MCU status code.","const char*","Returns a string representing the status message."
"MCU_BD.h","SetDebugMode","OperationStatus","Enables or disables debug mode for the MCU.","SetDebugMode(bool enabled, IConnection::MCU_PROG_MODE mode)","enabled, mode","bool, IConnection::MCU_PROG_MODE","enabled: True for enabling debug mode; mode: Programming mode.","OperationStatus","Returns success/failure status of the operation."
"MCU_BD.h","readIRAM","m_IRAM","Reads data from the MCU's IRAM.","readIRAM(const uint8_t *addr, uint8_t* values, const uint8_t count)","addr, values, count","const uint8_t*, uint8_t*, const uint8_t","addr: Start address; values: Buffer for data; count: Number of bytes to read.","OperationStatus","Returns success/failure status of the operation."
"MCU_BD.h","writeIRAM","m_IRAM","Writes data to the MCU's IRAM.","writeIRAM(const uint8_t *addr, const uint8_t* values, const uint8_t count)","addr, values, count","const uint8_t*, const uint8_t*, const uint8_t","addr: Start address; values: Data to write; count: Number of bytes to write.","OperationStatus","Returns success/failure status of the operation."
"MCU_BD.h","mSPI_write","None","Writes data to an SPI register.","mSPI_write(unsigned short addr_reg, unsigned short data_reg)","addr_reg, data_reg","unsigned short, unsigned short","addr_reg: Address of the register; data_reg: Data to write.","void","No return value."
"MCU_BD.h","mSPI_read","None","Reads data from an SPI register.","mSPI_read(unsigned short addr_reg)","addr_reg","unsigned short","addr_reg: Address of the register.","unsigned short","Returns data read from the register."
"MCU_BD.h","Reset_MCU","None","Resets the MCU to its initial state.","Reset_MCU()","None","None","No parameters.","void","No return value."
"MCU_File.h","MCU_File","None","Constructor to initialize the MCU_File object with a file name and mode.","MCU_File(const char *fileName, const char *mode)","fileName, mode","const char*, const char*","fileName: Name of the file; mode: File access mode (e.g., ""r"" for read).","N/A","Not applicable (constructor)."
"MCU_File.h","~MCU_File","None","Destructor to clean up the file resources.","~MCU_File()","None","None","No parameters.","N/A","Not applicable (destructor)."
"MCU_File.h","FileOpened","None","Checks if the file has been successfully opened.","FileOpened()","None","None","No parameters.","bool","Returns true if the file is opened, otherwise false."
"MCU_File.h","ReadBin","None","Reads the binary data from the file up to the specified limit.","ReadBin(unsigned long limit)","limit","unsigned long","limit: Maximum number of bytes to read.","void","No return value."
"MCU_File.h","ReadHex","None","Reads the hexadecimal data from the file up to the specified limit.","ReadHex(unsigned long limit)","limit","unsigned long","limit: Maximum number of bytes to read.","void","No return value."
"MCU_File.h","GetByte","None","Retrieves a byte from a specified address in the file.","GetByte(const unsigned long address, unsigned char &chr)","address, chr","const unsigned long, unsigned char&","address: Target address; chr: Reference to store the retrieved byte.","bool","Returns true on success, false on failure."
"MCU_File.h","BitString","None","Generates a bit string representation of specified bits at an address.","BitString(const unsigned long address, const unsigned char bits, const bool lEndian, std::string &str)","address, bits, lEndian, str","const unsigned long, const unsigned char, const bool, std::string&","address: Address; bits: Bits to process; lEndian: Endianness flag; str: Output bit string.","bool","Returns true on success, false on failure."
"MCU_File.h","Handle","None","Provides access to the internal file handle.","Handle()","None","None","No parameters.","FILE*","Returns the internal file handle."
"MCU_File.h","m_chunks","std::vector<MemBlock>","Stores memory chunks read from the file.","Access via object (e.g., file.m_chunks)","None","None","No parameters.","std::vector<MemBlock>","Represents the memory chunks read from the file."
"MCU_File.h","m_top","size_t","Represents the top address of the file being processed.","Access via object (e.g., file.m_top)","None","None","No parameters.","size_t","Holds the size of the top address in the file."
"MCU_File.h","m_file","FILE*","Internal file pointer used for operations.","Access via object (e.g., file.m_file)","None","None","No parameters.","FILE*","Represents the file pointer for the opened file."
"Si5351C.h","Si5351C","None","Constructor to initialize the Si5351C object.","Si5351C()","None","None","No parameters.","N/A","Not applicable (constructor)."
"Si5351C.h","~Si5351C","None","Destructor to clean up the Si5351C resources.","~Si5351C()","None","None","No parameters.","N/A","Not applicable (destructor)."
"Si5351C.h","Initialize","None","Initializes the Si5351C instance with a connection manager.","Initialize(IConnection *mng)","mng","IConnection*","mng: Pointer to a connection manager instance.","void","No return value."
"Si5351C.h","LoadRegValuesFromFile","None","Loads register values from a specified file.","LoadRegValuesFromFile(std::string FName)","FName","std::string","FName: Name of the file to load register values from.","bool","Returns true on success, false otherwise."
"Si5351C.h","SetPLL","None","Configures a PLL with specified parameters.","SetPLL(unsigned char id, unsigned long CLKIN_Hz, int CLK_SRC)","id, CLKIN_Hz, CLK_SRC","unsigned char, unsigned long, int","id: PLL identifier; CLKIN_Hz: Input clock frequency; CLK_SRC: Clock source identifier.","void","No return value."
"Si5351C.h","SetClock","None","Configures a clock channel with the specified frequency and settings.","SetClock(unsigned char id, unsigned long fOut_Hz, bool enabled, bool inverted)","id, fOut_Hz, enabled, inverted","unsigned char, unsigned long, bool, bool","id: Clock identifier; fOut_Hz: Output frequency; enabled: Enable/disable; inverted: Invert signal.","void","No return value."
"Si5351C.h","UploadConfiguration","None","Uploads the current configuration to the Si5351C hardware.","UploadConfiguration()","None","None","No parameters.","Status","Returns Status::SUCCESS on success or Status::FAILED on failure."
"Si5351C.h","ConfigureClocks","None","Configures clock channels according to the current settings.","ConfigureClocks()","None","None","No parameters.","Status","Returns Status::SUCCESS on success or Status::FAILED on failure."
"Si5351C.h","Reset","None","Resets the Si5351C module.","Reset()","None","None","No parameters.","void","No return value."
"Si5351C.h","GetStatusBits","StatusBits","Retrieves the current status bits from the Si5351C.","GetStatusBits()","None","None","No parameters.","StatusBits","Returns a StatusBits struct containing system initialization and error flags."
"Si5351C.h","ClearStatus","None","Clears the status flags in the Si5351C.","ClearStatus()","None","None","No parameters.","Status","Returns Status::SUCCESS on success or Status::FAILED on failure."
"Si5351C.h","FindVCO","None","Finds the VCO frequency range for clock and PLL configurations (private).","FindVCO(Si5351_Channel *clocks, Si5351_PLL *plls, const unsigned long Fmin, const unsigned long Fmax)","clocks, plls, Fmin, Fmax","Si5351_Channel*, Si5351_PLL*, const unsigned long, const unsigned long","clocks: Pointer to channel array; plls: Pointer to PLL array; Fmin/Fmax: Frequency limits.","void","No return value."
"Si5351C.h","m_newConfiguration","unsigned char[]","Stores new configuration values to upload to the Si5351C hardware.","Access directly, e.g., m_newConfiguration[i]","index","unsigned char","index: Index of the configuration byte to access.","unsigned char","Returns the configuration byte at the specified index."
"Streamer.h","StreamChannel","None","Constructor to initialize a StreamChannel object.","StreamChannel(Streamer* streamer)","streamer","Streamer*","streamer: Pointer to a Streamer object.","N/A","Not applicable (constructor)."
"Streamer.h","~StreamChannel","None","Destructor to clean up StreamChannel resources.","~StreamChannel()","None","None","No parameters.","N/A","Not applicable (destructor)."
"Streamer.h","Setup","None","Sets up a stream channel with the given configuration.","Setup(StreamConfig conf)","conf","StreamConfig","conf: Configuration for the stream.","void","No return value."
"Streamer.h","Close","None","Closes the stream channel.","Close()","None","None","No parameters.","void","No return value."
"Streamer.h","Read","None","Reads samples from the stream channel.","Read(void* samples, const uint32_t count, Metadata* meta, const int32_t timeout_ms = 100)","samples, count, meta, timeout_ms","void*, uint32_t, Metadata*, int32_t","samples: Buffer to store samples; count: Number of samples to read; meta: Metadata pointer; timeout_ms: Timeout in milliseconds.","int","Returns the number of samples read or error code."
"Streamer.h","Write","None","Writes samples to the stream channel.","Write(const void* samples, const uint32_t count, const Metadata* meta, const int32_t timeout_ms = 100)","samples, count, meta, timeout_ms","const void*, uint32_t, Metadata*, int32_t","samples: Buffer containing samples to write; count: Number of samples to write; meta: Metadata pointer; timeout_ms: Timeout in milliseconds.","int","Returns the number of samples written or error code."
"Streamer.h","GetInfo","Info","Retrieves information about the stream channel.","GetInfo()","None","None","No parameters.","Info","Returns an Info structure containing stream channel details."
"Streamer.h","GetStreamSize","None","Gets the size of the stream.","GetStreamSize()","None","None","No parameters.","int","Returns the size of the stream in samples."
"Streamer.h","IsActive","None","Checks if the stream channel is active.","IsActive()","None","None","No parameters.","bool","Returns true if the stream channel is active, otherwise false."
"Streamer.h","Start","None","Starts the stream channel.","Start()","None","None","No parameters.","int","Returns 0 on success, error code otherwise."
"Streamer.h","Stop","None","Stops the stream channel.","Stop()","None","None","No parameters.","int","Returns 0 on success, error code otherwise."
"Streamer.h","Streamer","None","Constructor to initialize a Streamer object.","Streamer(FPGA* f, LMS7002M* chip, int id)","f, chip, id","FPGA*, LMS7002M*, int","f: FPGA object; chip: LMS7002M object; id: Streamer ID.","N/A","Not applicable (constructor)."
"Streamer.h","~Streamer","None","Destructor to clean up Streamer resources.","~Streamer()","None","None","No parameters.","N/A","Not applicable (destructor)."
"Streamer.h","SetupStream","None","Sets up a stream channel with a given configuration.","SetupStream(const StreamConfig& config)","config","const StreamConfig&","config: Configuration for the stream.","StreamChannel*","Returns a pointer to the configured StreamChannel object."
"Streamer.h","GetStreamSize","None","Gets the size of the stream for transmission or reception.","GetStreamSize(bool tx)","tx","bool","tx: Indicates if the size is for transmission (true) or reception (false).","int","Returns the stream size."
"Streamer.h","GetHardwareTimestamp","None","Retrieves the hardware timestamp.","GetHardwareTimestamp()","None","None","No parameters.","uint64_t","Returns the hardware timestamp."
"Streamer.h","SetHardwareTimestamp","None","Sets the hardware timestamp.","SetHardwareTimestamp(const uint64_t now)","now","const uint64_t","now: New hardware timestamp value.","void","No return value."
"Streamer.h","UpdateThreads","None","Updates the stream handling threads.","UpdateThreads(bool stopAll = false)","stopAll","bool","stopAll: Indicates if all threads should be stopped.","int","Returns 0 on success, error code otherwise."
"Streamer.h","ReceivePacketsLoop","None","Handles packet reception in a loop (private method).","ReceivePacketsLoop()","None","None","No parameters.","void","No return value."
"Streamer.h","TransmitPacketsLoop","None","Handles packet transmission in a loop (private method).","TransmitPacketsLoop()","None","None","No parameters.","void","No return value."
"Streamer.h","ResizeChannelBuffers","None","Resizes the internal channel buffers (private method).","ResizeChannelBuffers()","None","None","No parameters.","void","No return value."
"Streamer.h","StreamConfig","StreamDataFormat","Configuration structure for streams.","Access via StreamConfig object","isTx, channelID, align, bufferLength, format, linkFormat","bool, uint8_t, bool, size_t, StreamDataFormat, StreamDataFormat","isTx: Transmit flag; channelID: Channel ID; align: Data alignment; bufferLength: Buffer size; format: Data format; linkFormat: Wire format.","N/A","Not applicable (struct)."
"Streamer.h","StreamChannel::Info","StreamChannel::Metadata","Structures for stream channel metadata and info.","Access via StreamChannel object","None","None","No parameters.","N/A","Not applicable (struct)."
"SystemResources.h","getLimeSuiteRoot","None","Retrieves the library's installation root directory.","getLimeSuiteRoot()","None","None","No parameters.","std::string","Returns the library's installation root directory path."
"SystemResources.h","getHomeDirectory","None","Retrieves the user's home directory path.","getHomeDirectory()","None","None","No parameters.","std::string","Returns the full path to the user's home directory."
"SystemResources.h","getAppDataDirectory","None","Retrieves the application data directory path for the user.","getAppDataDirectory()","None","None","No parameters.","std::string","Returns the full path to the application's data directory."
"SystemResources.h","getConfigDirectory","None","Retrieves the library's configuration data directory path.","getConfigDirectory()","None","None","No parameters.","std::string","Returns the full path to the configuration data directory."
"SystemResources.h","listImageSearchPaths","None","Retrieves a prioritized list of directories for locating image resources.","listImageSearchPaths()","None","None","No parameters.","std::vector<std::string>","Returns a vector of directory paths for image searches."
"SystemResources.h","locateImageResource","None","Retrieves the full file path for a specific image resource if it exists.","locateImageResource(const std::string &name)","name","const std::string&","name: File name of the image resource, including its extension.","std::string","Returns the full path to the image resource or an empty string if not found."
"SystemResources.h","downloadImageResource","None","Downloads an image resource into the user's application data directory.","downloadImageResource(const std::string &name)","name","const std::string&","name: File name of the image resource to download, including its extension.","int","Returns 0 for success or an error code upon failure."
"VersionInfo.h","GetLibraryVersion",,"Get the library version in major.minor.patch.build-extra format","lime::GetLibraryVersion()","None","None","None","std::string","The library version as a string"
"VersionInfo.h","GetBuildTimestamp",,"Get the build date in ""%Y-%M-%d"" format","lime::GetBuildTimestamp()","None","None","None","std::string","The build date as a string"
"VersionInfo.h","GetAPIVersion",,"Get the API version in major.minor.increment format, based on LIME_SUITE_API_VERSION constant","lime::GetAPIVersion()","None","None","None","std::string","The API version as a string"
"VersionInfo.h","GetABIVersion",,"Get the ABI/so version of the library","lime::GetABIVersion()","None","None","None","std::string","The ABI/so version as a string"
"VersionInfo.h",,"LIME_SUITE_API_VERSION","API version constant encoded as `<major << 16> Encodes the API version for preprocessor checks","<minor << 8>","<8-bit increment>` format for preprocessor checks","Defined in header using #define directive","None","None","None"
